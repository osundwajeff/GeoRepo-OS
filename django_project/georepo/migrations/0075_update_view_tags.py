# Generated by Django 4.0.7 on 2023-03-05 15:48

from django.db import migrations


def update_view_tags(apps, schema_editor):
    DatasetView = apps.get_model('georepo', 'DatasetView')
    TagWithDescription = apps.get_model('georepo', 'TagWithDescription')
    TaggedRecord = apps.get_model('georepo', 'TaggedRecord')
    all_tag = TagWithDescription.objects.filter(
        name='all'
    )
    all_tag.update(
        name='all_versions',
        slug='all_versions'
    )
    dataset_tag, _ = TagWithDescription.objects.get_or_create(
        name='dataset',
        slug='dataset'
    )
    subset_tag, _ = TagWithDescription.objects.get_or_create(
        name='subset',
        slug='subset'
    )
    ContentType = apps.get_model('contenttypes', 'ContentType')
    dataset_view_type = None
    views = DatasetView.objects.exclude(
        default_type__isnull=True
    )
    for view in views:
        if dataset_view_type is None:
            dataset_view_type = ContentType.objects.get(
                app_label='georepo',
                model='datasetview'
            )
        if view.description:
            view.description = view.description.replace(
                'features', 'entities'
            )
        if view.default_ancestor_code:
            TaggedRecord.objects.create(
                content_type_id=dataset_view_type.id,
                object_id=view.id,
                tag=subset_tag
            )
        else:
            TaggedRecord.objects.create(
                content_type_id=dataset_view_type.id,
                object_id=view.id,
                tag=dataset_tag
            )
        view.save()


class Migration(migrations.Migration):

    dependencies = [
        ('georepo', '0074_entityname_label'),
    ]

    operations = [
        migrations.RunPython(update_view_tags),
    ]
